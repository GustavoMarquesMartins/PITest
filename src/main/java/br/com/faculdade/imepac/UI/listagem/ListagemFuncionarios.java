/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.faculdade.imepac.UI.listagem;

import br.com.faculdade.imepac.UI.cadastro.FormDadosFuncionario;
import br.com.faculdade.imepac.UI.cadastro.FormProjeto;
import br.com.faculdade.imepac.UI.commons.CommonMethods;
import br.com.faculdade.imepac.UI.edicao.FormDadosFuncionarioEdicao;
import br.com.faculdade.imepac.UI.edicao.FormProjetoEdicao;
import br.com.faculdade.imepac.UI.visualizar.VisualizarDadosFuncionario;
import br.com.faculdade.imepac.entidade.pessoa.Funcionario;
import br.com.faculdade.imepac.entidade.projeto.Projeto;
import br.com.faculdade.imepac.entidade.relacionamento.Relacionamento;
import br.com.faculdade.imepac.infraestrutura.JPAUtil;
import br.com.faculdade.imepac.infraestrutura.Persistence;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gusta
 */
public class ListagemFuncionarios extends javax.swing.JPanel {

    private Funcionario funcionarioSelecionado;
    private JFrame frame;
    private List<Funcionario> listaFuncionarios;

    /**
     * Creates new form ListagemFuncionarios
     */
    public ListagemFuncionarios(JFrame frame) {
        this.frame = frame;
        initComponents();
        inicializeTable();
        addActions();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFuncionarios = new javax.swing.JTable();
        jButtonArquivar = new javax.swing.JButton();
        jButtonEdicao = new javax.swing.JButton();
        jButtonVerProjetos = new javax.swing.JButton();
        jButtonBuscar = new javax.swing.JButton();
        jTextFieldCampoBusca = new javax.swing.JTextField();
        jButtonLimparFiltro = new javax.swing.JButton();
        jCheckBoxStatus = new javax.swing.JCheckBox();
        jButtonVerDadosFuncionario = new javax.swing.JButton();

        jPasswordField1.setText("jPasswordField1");

        jTableFuncionarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "CPF", "Nome"
            }
        ));
        jTableFuncionarios.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jTableFuncionarios.setColumnSelectionAllowed(true);
        jTableFuncionarios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTableFuncionarios);

        jButtonArquivar.setBackground(new java.awt.Color(204, 0, 0));
        jButtonArquivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/funcionario-deletar-icone.png"))); // NOI18N
        jButtonArquivar.setText("Arquivar");

        jButtonEdicao.setBackground(new java.awt.Color(0, 102, 255));
        jButtonEdicao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icone-editar.png"))); // NOI18N
        jButtonEdicao.setText("Editar");

        jButtonVerProjetos.setBackground(new java.awt.Color(0, 102, 51));
        jButtonVerProjetos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/lupa.png"))); // NOI18N
        jButtonVerProjetos.setText("Projetos");

        jButtonBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/lupa (1).png"))); // NOI18N

        jTextFieldCampoBusca.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldCampoBusca.setForeground(new java.awt.Color(0, 0, 0));

        jButtonLimparFiltro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/filtro.png"))); // NOI18N
        jButtonLimparFiltro.setText("Limpar");

        jCheckBoxStatus.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jCheckBoxStatus.setText("Arquivados");
        jCheckBoxStatus.setToolTipText("");

        jButtonVerDadosFuncionario.setBackground(new java.awt.Color(0, 204, 204));
        jButtonVerDadosFuncionario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/olho.png"))); // NOI18N
        jButtonVerDadosFuncionario.setText("Visualizar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonEdicao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonVerProjetos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonVerDadosFuncionario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonArquivar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonLimparFiltro)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxStatus))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldCampoBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldCampoBusca))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLimparFiltro)
                    .addComponent(jCheckBoxStatus))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEdicao, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVerProjetos, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVerDadosFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonArquivar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonArquivar;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonEdicao;
    private javax.swing.JButton jButtonLimparFiltro;
    private javax.swing.JButton jButtonVerDadosFuncionario;
    private javax.swing.JButton jButtonVerProjetos;
    private javax.swing.JCheckBox jCheckBoxStatus;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableFuncionarios;
    private javax.swing.JTextField jTextFieldCampoBusca;
    // End of variables declaration//GEN-END:variables

    public void inicializeTable() {
        DefaultTableModel modelo = new DefaultTableModel();

        modelo.addColumn("CPF");
        modelo.addColumn("Nome");
        modelo.addColumn("Status");

        EntityManager em = JPAUtil.getEntityManager();
        Persistence ps = new Persistence(em);

        em.getTransaction().begin();
        listaFuncionarios = ps.getListEntity(Funcionario.class);
        em.close();

        for (Funcionario funcionario : listaFuncionarios) {
            modelo.addRow(new Object[]{funcionario.getCpf(), funcionario.getNome(), funcionario.isArquivado()});
        }

        // Atribua o modelo de tabela à tabela
        jTableFuncionarios.setModel(modelo);

        // Permita seleção única de linha na tabela
        jTableFuncionarios.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Adicione um ouvinte de seleção à tabela
        jTableFuncionarios.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = jTableFuncionarios.getSelectedRow();
                    if (selectedRow != -1) { // Verifique se alguma linha está selecionada
                        // Recupere os dados da linha selecionada
                        int rowIndex = jTableFuncionarios.convertRowIndexToModel(selectedRow);
                        // Supondo que 'listaFuncionarios' esteja disponível neste contexto
                        funcionarioSelecionado = listaFuncionarios.get(rowIndex);
                        // Faça algo com o funcionarioSelecionado
                    }
                }
            }
        });
    }

    public void addActions() {

        jButtonEdicao.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                CommonMethods.goToNewPage(frame, new FormDadosFuncionarioEdicao(frame, funcionarioSelecionado.getId()));
            }
        });

        jButtonLimparFiltro.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jTextFieldCampoBusca.setText("");
                inicializeTable();
            }
        });

        jButtonVerDadosFuncionario.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                JScrollPane scrollPane = new JScrollPane(new VisualizarDadosFuncionario(frame, funcionarioSelecionado.getId()));

                scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
                scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

                frame.getContentPane().removeAll();

                // Adiciona o JScrollPane ao frame
                frame.add(scrollPane, BorderLayout.CENTER);

                // Torna o frame visível
                frame.setVisible(true);
            }
        });

        jButtonBuscar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                var valorBusca = jTextFieldCampoBusca.getText();

                EntityManager em = JPAUtil.getEntityManager();
                Persistence ps = new Persistence(em);

                var status = jCheckBoxStatus.isSelected();

                em.getTransaction().begin();
                listaFuncionarios = ps.getListFuncionarios(valorBusca, !status);
                em.close();

                DefaultTableModel modelo = new DefaultTableModel();

                modelo.addColumn("Nome");
                modelo.addColumn("CPF");
                modelo.addColumn("Status");

                for (Funcionario funcionario : listaFuncionarios) {
                    modelo.addRow(new Object[]{funcionario.getNome(), funcionario.getCpf(), funcionario.isArquivado()});
                }

                jTableFuncionarios.setModel(modelo);

            }
        });

        jButtonArquivar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {

                    if (funcionarioSelecionado.isArquivado()) {
                        funcionarioSelecionado.setArquivado(false);
                    } else {
                        funcionarioSelecionado.setArquivado(true);
                    }

                    EntityManager em = JPAUtil.getEntityManager();
                    Persistence ps = new Persistence(em);

                    em.getTransaction().begin();
                    ps.updateEntity(funcionarioSelecionado);
                    em.getTransaction().commit();
                    em.close();
                    JOptionPane.showMessageDialog(null, "Status alterado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                    CommonMethods.goToNewPage(frame, new ListagemFuncionarios(frame));
                } catch (Exception erro) {
                    JOptionPane.showMessageDialog(null, "Ocorreu um erro! " + erro.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        jButtonVerProjetos.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                DefaultTableModel modelo = new DefaultTableModel();

                modelo.addColumn("CEP");
                modelo.addColumn("Nome");
                modelo.addColumn("Data-Início");
                modelo.addColumn("Data-Termino");

                EntityManager em = JPAUtil.getEntityManager();
                Persistence ps = new Persistence(em);

                em.getTransaction().begin();
                var listaProjetos = ps.buscarRelacionamentosPorFuncionarioId(funcionarioSelecionado.getId());
                em.close();

                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");

                for (Relacionamento relacionamento : listaProjetos) {
                    modelo.addRow(new Object[]{relacionamento.getProjeto().getCep(),
                        relacionamento.getProjeto().getNome(),
                        relacionamento.getDataInicio().format(formatter),
                        relacionamento.getDataTermino() != null ? relacionamento.getDataTermino().format(formatter) : "Vazio"
                    });
                }

                JTable table = new JTable(modelo);
                JScrollPane scrollPane = new JScrollPane(table);

                JFrame frame = new JFrame("Projetos relacionados ao Funcionário");
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.setSize(500, 300);
                frame.add(scrollPane);
                frame.setVisible(true);

            }
        });

        jCheckBoxStatus.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                DefaultTableModel modelo = new DefaultTableModel();

                modelo.addColumn("CPF");
                modelo.addColumn("Nome");
                modelo.addColumn("Status");

                if (e.getStateChange() == ItemEvent.SELECTED) {
                    for (Funcionario funcionario : listaFuncionarios) {
                        if (funcionario.isArquivado() == false) {
                            modelo.addRow(new Object[]{funcionario.getCep(), funcionario.getNome(), funcionario.isArquivado()});
                        }
                    }
                }
                if (e.getStateChange() != ItemEvent.SELECTED) {
                    for (Funcionario funcionario : listaFuncionarios) {
                        if (funcionario.isArquivado() == true) {
                            modelo.addRow(new Object[]{funcionario.getCpf(), funcionario.getNome(), funcionario.isArquivado()});
                        }
                    }
                }
                jTableFuncionarios.setModel(modelo);
            }
        });
    }
}
